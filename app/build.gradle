plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

apply from: '../shared_dependencies.gradle'

android {
    compileSdkVersion 34
    defaultConfig {
        applicationId "com.junemon.travelingapps"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig = true
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += ["-opt-in=kotlin.RequiresOptIn",
                             // Enable experimental coroutines APIs, including Flow
                             "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                             "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                             "-opt-in=kotlinx.coroutines.FlowPreview",
                             "-opt-in=androidx.paging.ExperimentalPagingApi",
                             "-opt-in=com.google.accompanist.pager.ExperimentalPagerApi",
                             "-opt-in=androidx.compose.material.ExperimentalMaterialApi",
                             "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                             "-opt-in=com.google.accompanist.pager.ExperimentalPagerApi",
                             "-opt-in=kotlin.Experimental"]
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    namespace 'com.junemon.travelingapps'
}

kapt {
    correctErrorTypes true
}


dependencies {
    implementation project(':core')
    implementation project(':model')
    implementation 'androidx.core:core-splashscreen:1.0.0'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.7.0'
    implementation(platform("androidx.compose:compose-bom:$composebom_version"))
    // or only import the main APIs for the underlying toolkit systems,
    // such as input and measurement/layout
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.foundation:foundation'
    //Material desing 2
    implementation 'androidx.compose.material:material'
    //Material Design 3
//    implementation 'androidx.compose.material3:material3'
    // compose constraint
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    // Android Studio Preview support
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.navigation:navigation-testing:2.5.3'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.3'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.3'
    // Optional - Integration with activities
    implementation 'androidx.activity:activity-compose:1.6.1'
    // Optional - Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    // Optional - Integration with LiveData
    implementation 'androidx.compose.runtime:runtime-livedata'
    // Optional - Included automatically by material, only add when you need
    // the icons but not the material library (e.g. when using Material3 or a
    // custom design system based on Foundation)
    implementation 'androidx.compose.material:material-icons-core'
    // Optional - Add full set of material icons
    implementation 'androidx.compose.material:material-icons-extended'
    // Optional - Add window size utils
    implementation 'androidx.compose.material3:material3-window-size-class'
    //navigation
    implementation "androidx.navigation:navigation-compose:$navigationVer"
    implementation 'io.coil-kt:coil-compose:2.2.2'

}
